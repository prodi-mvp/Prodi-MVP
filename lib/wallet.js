import { ethers } from "ethers";

export const connectWallet = async () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  if (typeof window === "undefined") {
    console.warn("‚ö†Ô∏è window is undefined ‚Äî SSR render, skipping connect");
    return null;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MetaMask –¥–æ—Å—Ç—É–ø–µ–Ω
  if (!window.ethereum) {
    alert("ü¶ä MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
    return null;
  }

  try {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º
    await window.ethereum.request({ method: "eth_requestAccounts" });

    // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ signer
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    const userAddress = await signer.getAddress();

    console.log("‚úÖ MetaMask –ø–æ–¥–∫–ª—é—á–µ–Ω:", userAddress);
    return { provider, signer, userAddress };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ MetaMask:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ MetaMask.");
    return null;
  }
};
